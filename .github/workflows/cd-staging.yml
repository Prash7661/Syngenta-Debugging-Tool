name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ENVIRONMENT: staging

jobs:
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push staging image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=staging

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for staging
      run: |
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Deploy to staging Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image in deployment
        kubectl set image deployment/sfmc-dev-suite-deployment \
          sfmc-dev-suite=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }} \
          -n sfmc-development-suite-staging
        
        # Wait for rollout to complete
        kubectl rollout status deployment/sfmc-dev-suite-deployment \
          -n sfmc-development-suite-staging \
          --timeout=600s

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Get service endpoint
        STAGING_URL=$(kubectl get ingress sfmc-dev-suite-ingress \
          -n sfmc-development-suite-staging \
          -o jsonpath='{.spec.rules[0].host}')
        
        if [ -z "$STAGING_URL" ]; then
          # Fallback to port-forward for testing
          kubectl port-forward svc/sfmc-dev-suite-service 8080:80 \
            -n sfmc-development-suite-staging &
          STAGING_URL="localhost:8080"
          sleep 10
        fi
        
        # Run smoke tests
        ./scripts/smoke-tests.sh "https://$STAGING_URL" || \
        ./scripts/smoke-tests.sh "http://$STAGING_URL"

    - name: Run performance tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Get staging URL
        STAGING_URL=$(kubectl get ingress sfmc-dev-suite-ingress \
          -n sfmc-development-suite-staging \
          -o jsonpath='{.spec.rules[0].host}')
        
        if [ ! -z "$STAGING_URL" ]; then
          # Run basic performance tests
          npm run test:performance -- --url="https://$STAGING_URL" || true
        fi

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        text: |
          Staging deployment ${{ job.status }}!
          Environment: ${{ env.ENVIRONMENT }}
          Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}

  rollback-staging:
    name: Rollback Staging if Failed
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: failure() && github.event.inputs.force_deploy != 'true'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for staging
      run: |
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Rollback deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Rollback to previous version
        kubectl rollout undo deployment/sfmc-dev-suite-deployment \
          -n sfmc-development-suite-staging
        
        # Wait for rollback to complete
        kubectl rollout status deployment/sfmc-dev-suite-deployment \
          -n sfmc-development-suite-staging \
          --timeout=300s

    - name: Verify rollback
      run: |
        export KUBECONFIG=kubeconfig
        
        # Check deployment status
        kubectl get deployment sfmc-dev-suite-deployment \
          -n sfmc-development-suite-staging
        
        # Run basic health check
        kubectl exec deployment/sfmc-dev-suite-deployment \
          -n sfmc-development-suite-staging \
          -- curl -f http://localhost:3000/api/health

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          ðŸ”„ Staging deployment rolled back due to failure
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}